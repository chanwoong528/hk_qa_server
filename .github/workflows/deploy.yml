# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        node-version: [20.16.0]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout source code.
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Check Npm -v
        run: npm -v

      - name: create env file
        working-directory: ./
        run: |
          pwd
          mkdir env
          touch env/prod.env
          echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> env/prod.env
          echo POSTGRES_HOST=${{secrets.POSTGRES_HOST}} >> env/prod.env
          echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> env/prod.env
          echo POSTGRES_PORT_POOL=${{secrets.POSTGRES_PORT_POOL}} >> env/prod.env
          echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> env/prod.env
          echo JWT_SECRET=${{secrets.JWT_SECRET}} >> env/prod.env
          echo BCRYPT_SALT=${{secrets.BCRYPT_SALT}} >> env/prod.env
          echo BCRYPT_PW=${{secrets.BCRYPT_PW}} >> env/prod.env
          echo SMTP_AUTH_PW=${{secrets.SMTP_AUTH_PW}} >> env/prod.env
          echo SMTP_AUTH_EMAIL=${{secrets.SMTP_AUTH_EMAIL}} >> env/prod.env
          echo SMTP_HOST=${{secrets.SMTP_HOST}} >> env/prod.env
          echo SMTP_PORT=${{secrets.SMTP_PORT}} >> env/prod.env
          echo HOMEPAGE_URL=${{secrets.HOMEPAGE_URL}} >> env/prod.env
          echo AWS_S3_BUCKET_NAME=${{secrets.AWS_S3_BUCKET_NAME}} >> env/prod.env
          echo AWS_S3_IMG_FOLDER=${{secrets.AWS_S3_IMG_FOLDER}} >> env/prod.env
          echo AWS_ACCESS_KEY=${{secrets.AWS_ACCESS_KEY}} >> env/prod.env
          echo AWS_SECRET_KEY=${{secrets.AWS_SECRET_KEY}} >> env/prod.env
          echo TEAMS_WEBHOOK_URL=${{secrets.TEAMS_WEBHOOK_URL}} >> env/prod.env
          cat env/prod.env

      - name: build server files
        working-directory: ./
        run: |
          npm install
          npm run build

      - name: zip file
        run: zip -r server.zip ./dist ./scripts ./appspec.yml ./package.json ./package-lock.json ./tsconfig.json ./env/prod.env ./ecosystem.config.js

      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: upload to S3
        run: aws s3 cp --region ap-northeast-2 ./server.zip s3://hkqa-build-bucket/deploy/

      - name: deploy with AWS codeDeploy
        run: aws deploy create-deployment
          --file-exists-behavior OVERWRITE
          --application-name hkqacd
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name HQGROUP
          --ignore-application-stop-failures
          --s3-location bucket=hkqa-build-bucket,bundleType=zip,key=deploy/server.zip
